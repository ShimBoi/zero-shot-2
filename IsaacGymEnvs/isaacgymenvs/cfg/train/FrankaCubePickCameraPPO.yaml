params:
  seed: ${...seed}
  algo:
    name: a2c_continuous

  model:
    name: continuous_a2c_logstd  # Reference your custom PPO model

  network:
    name: actor_critic  # Use the standard actor-critic network
    separate: False  # Share architecture between actor and critic for efficiency
    space:
      continuous:  # Network for continuous action space
        mu_activation: None
        sigma_activation: None
        mu_init:
          name: default
        sigma_init:
          name: const_initializer
          val: 0
        fixed_sigma: True
    cnn:
      type: conv2d
      activation: relu
      initializer:
        name: default
      regularizer:
        name: None
      convs:
      - filters: 32
        kernel_size: 8
        strides: 4
        padding: 0
      - filters: 64
        kernel_size: 4
        strides: 2
        padding: 0
      - filters: 64
        kernel_size: 3
        strides: 1
        padding: 0
    cnn_post_mlp:
      units: [256, 128]  # MLP for postprocessing CNN features
      activation: relu
      initializer:
        name: default
      regularizer:
        name: None
    mlp:
      vector_input: true  # Indicate that a vector input is used
      units: [128, 64]  # MLP for vector observations
      activation: relu
      initializer:
        name: default
      regularizer:
        name: None

  observations:  # Define the two observation buffers
    image_obs:
      type: image
      shape: [3, 84, 84]  # Define the shape of the image input
    vector_obs:
      type: vector
      shape: [10]  # Define the shape of the vector input

  load_checkpoint: ${if:${...checkpoint},True,False}  # Flag which sets whether to load the checkpoint
  load_path: ${...checkpoint}  # Path to the checkpoint to load

  config:
    name: ${resolve_default:FrankaCubePickCamera,${....experiment}}
    full_experiment_name: ${.name}
    env_name: rlgpu
    multi_gpu: ${....multi_gpu}
    ppo: True
    mixed_precision: False
    normalize_input: True
    normalize_value: True
    value_bootstrap: True
    num_actors: ${....task.env.numEnvs}
    reward_shaper:
      scale_value: 1.0
    normalize_advantage: True
    gamma: 0.99
    tau: 0.95
    learning_rate: 5e-4
    lr_schedule: adaptive
    schedule_type: standard
    kl_threshold: 0.008
    score_to_win: 1000000
    max_epochs: ${resolve_default:50000,${....max_iterations}}
    save_best_after: 200
    save_frequency: 100
    print_stats: True
    grad_norm: 1.0
    entropy_coef: 0.0
    truncate_grads: True
    e_clip: 0.2
    horizon_length: 64
    minibatch_size: 512
    mini_epochs: 5
    critic_coef: 4
    clip_value: True
    seq_len: 4
    bounds_loss_coef: 0.0001